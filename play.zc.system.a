
; play.zc.system.a

; Play "zero crossing" 1-bit audio files with visualization
; December 26, 2022
; (c) 2022 by Frank Milliron, Lombard $oftware
; https://github.com/frankmilliron/play.zc.system

; Original inspiration was the audio recorder/player from
; COMPUTE! Magazine - Issue 88 / September 1987 / Page 86

; Re-worked version by Peter Ferrie/qkumba
; comp.sys.apple.2 - July 13, 2017
; https://groups.google.com/g/comp.sys.apple2.programmer/c/6MwH7Crkbbg/m/oU6NOZbqAQAJ

; Bugfix version December 2022: The CMP ($00,X) instruction can accidentally
; access softswitches, so has been replaced with 3 nops, at the expense of 1 byte.
; For compatibility with //gs, a non-ROM wait routine has also been added.

; "acme zc.player.a" to assemble


; ProDOS file format $D8 SND "sampled sound" (audio) files
; Ciderpress-style  #d810xx  (xx = Playback speed)
; #d81003 for default file playback


; Playback speed at 1,020,484.32 cycles per sec
; (calculated from cycle counting 2048 samples - 1 page)

; Playback speed set in low byte of prodos auxtype
; #1 - 194,563 cycles - 95 cycles per bit - 10,741.94 Hz
; #2 - 237,571 cycles - 116 cycles per bit - 8,797.28 Hz
; #3 - 290,819 cycles - 141 cycles per bit - 7,186.51 Hz (*) Default
; #4 - 354,307 cycles - 173 cycles per bit - 5,898.75 Hz

; Original COMPUTE! audio player at "4" = 7,482.65 Hz


; Fun Fact:
; 140k floppy can store roughly 2 1/2 minutes of audio at default setting



; TODO:
; Implement BASIS.SYSTEM
; Compute file size on load
; check for correct filetype (which is?)
; set playback speed to auxtype
; Save //gs speed on load - set slow to play - restore on exit
; //gs text page 2 fix - detect if Alternate Screen Mode is on




!cpu 6502
!to "BASIS.SYSTEM#ff0000",plain
!symbollist "BASIS.SYSTEM.list.txt"

*=$2000


; ****************************************************************
; *                           Constants                          *
; ****************************************************************

KeyPressed     = $FF      ; key pressed during playback, 0 if end of data

Start          = $C00     ; can go down to $C00
Stop           = $BF00    ; ProDOS maximum under MLI

Speed          = 3        ; see above table for sample rates

Keyboard       = $C000    ; get keypress
KeyStrobe      = $C010    ; clear keyboard strobe
Speaker        = $C030    ; toggle speaker output
Page2          = $C055    ; show text/graphics page 2

ROM_Text       = $FB2F    ; exit graphics mode, set page 1
ROM_Home       = $FC58    ; clear text screen 1



; ****************************************************************
; *                  Create BASIS.SYSTEM Format                  *
; ****************************************************************

; When a file is selected, ProDOS launches /VOL/BASIS.SYSTEM with:
; 1) The ProDOS prefix set to the directory containing the selected file
; 2) The filename of the selected file stored at $2006
; 3) $280 is set to the name of the root volume
; 4) $380 is set to the name of the launched SYS file (ie, /VOL/BASIS.SYSTEM)

         jmp   Start

         !hex  EE EE      ; signifies launchable prodos file
         !byte $41        ; prodos path buffer length (65 bytes)
         !fill 65,0       ; prodos full path buffer

Start    sta   KeyStrobe  ; clear stray keypresses
         ;jsr   ROM_Home

MoveFilename              ; (should be at address $2047 here)
         ldy   #$41       ; copy filename from $2006 to $300
-        lda   $2006,y
         ;and   #$DF       ; convert name to uppercase ?????
         sta   AudName,y
         dey
         bpl   -

GetAttributes
         jsr   MLI
         !byte $C4        ; get file attributes
         !word C4_Parms

         lda   C4_Parms+4 ; file_type
         cmp   #$5B       ; must be  -----Filetype for Sound? Also check auxtype for playback speed
         beq   SetType
         jmp   Exit+Reloc ; we haven't relocated yet

SetType  lda   C4_Parms+5 ; low byte of aux_type
         sta   VidType

ProRWTS2 jsr   init       ; sets up ProRWTS2, relocates itself to $1000

         sta   SS_Aux
CopyPro  lda   $1000,y    ; Y set to zero by init
         sta   $1000,y    ; copy ProRWTS2 to AUX
         iny
         bne   CopyPro
         sta   SS_Main

         lda   #>VidName
         sta   namhi
         lda   #<VidName
         sta   namlo
         lda   #1         ; cmdread
         sta   reqcmd
         lda   #0
         sta   ldrlo
         sta   sizelo
         sta   auxreq

RelocPlayer
         ldy   #0         ; total < $400 bytes
-        lda   Relocated,y
         sta   Reloc,y
         lda   Relocated+$100,y
         sta   Reloc+$100,y
         lda   Relocated+$200,y
         sta   Reloc+$200,y
         lda   Relocated+$300,y
         sta   Reloc+$300,y
         dey
         bne   -
         jmp   Reloc

C4_Parms                  ; GET_FILE_INFO ($C4) Parameters   --- will need to copy to Reloc
         !byte   $0a      ; param_count
         !word   VidName  ; pathname
         !byte   0        ; access
         !byte   0        ; file_type
         !word   0        ; aux_type
         !byte   0        ; storage_type
         !word   0        ; blocks_used
         !word   0        ; mod_date
         !word   0        ; mod_time
         !word   0        ; create_date
         !word   0        ; create_time




; ****************************************************************
; *                     Initialize Everything                    *
; ****************************************************************

Relocated
!pseudopc Reloc {

         jsr   EmuTest
         jsr   TestGS
         jsr   SetReset













; ****************************************************************
; *                     Zero-Crossing Player                     *
; ****************************************************************

Setup    lda   #$00       ; start address (low byte)
         sta   GetNote+6
         sta   KeyPressed
         lda   #>Start    ; start address (high byte)
         sta   GetNote+7
         lda   #>Stop     ; stop address (high byte)
         sta   StopAddr+1
         lda   #Speed     ; playback speed
         sta   SameByte+2

ClrPg1   ;jsr   ROM_Home   ; turn page 1 black
         ;bit   $C050
         ;bit   $C057
         ;bit   $C053      ; new mixed hires visualizer

         lda   #$20       ; turn page 2 white
         ldx   #$77
ClrPg2   sta   $800,x     ; preserve screen holes on page 2
         sta   $880,x     ; //c and //c+ use them for serial port
         sta   $900,x
         sta   $980,x
         sta   $a00,x
         sta   $a80,x
         sta   $b00,x
         sta   $b80,x
         dex
         bpl   ClrPg2

         jmp   GetNote    ; X=0 here

SamePage ldy   #8         ; bits per byte

SameByte pha
         lda   #3         ; playback speed
         jsr   FakeWait
         pla
         asl              ; shift bits into carry
         bcc   Delay      ; if carry is zero, don't click

Click    sta   Speaker    ; found a high bit

         pha
PageFlip bit   Page2      ; **self-modified!
         lda   PageFlip+1
         eor   #1         ; alternate displaying page 1/2
         sta   PageFlip+1
         pla

         jmp   NextBit

Delay    cmp   ($00),y    ; 5
         cmp   ($00),y    ; 5
         cmp   ($00),y    ; 5
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2

NextBit  dey              ; 2  end of current 8-bit note?
         bne   SameByte1

GetNote  lda   Keyboard   ; check for keypress
         bmi   Key        ; yes, let's exit

         lda   $d1d1,x    ; current byte  **self-modified!
         inx
         bne   SamePage1
         inc   GetNote+7
         lda   GetNote+7
StopAddr cmp   #$d1       ; stop address  **self-modified!
         bne   SamePage
         beq   Exit1

SameByte1
         cmp   $44,x      ; 4  even out cycle count
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2
         jmp   SameByte   ; 3
SamePage1
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2
         jmp   SamePage   ; 3

FakeWait sec              ; delay for (26 + 27*Acc + 5*(Acc*Acc))/2 cycles
wait1    pha              ; but without using buggy //gs ROM banking
wait2    sbc   #1
         bne   wait2
         pla
         sbc   #1
         bne   wait1
         rts










; ****************************************************************
; *                       Keypress Handler                       *
; ****************************************************************

Key      sta   KeyStrobe

Rew      cmp   #$88       ; left arrow key pressed? ($08+80)
         bne   FastFor
         ldx   treeidx
         beq   Play       ; if treeidx is already 0 don't rewind
         dex
         beq   Rew1       ; if it's 1, decrement 1
         dex              ; otherwise decrement 2
Rew1     stx   treeidx
         jmp   DoReset1   ; restart playback using reset routine

FastFor  cmp   #$95       ; right arrow key pressed? ($15+80)
         bne   Pause
         inc   treeidx
         jmp   DoReset1

Pause    cmp   #$A0       ; space Bar pressed? ($20+80)
         bne   Single
Pause1   lda   Keyboard
         bpl   Pause1     ; test for second keypress
         cmp   #$9B       ; escape key pressed? ($1B+80)
         beq   Exit2
         cmp   #$A0
         beq   Pause2
         bit   KeyStrobe
         jmp   Pause1
Pause2   bit   KeyStrobe
         jmp   Play

Single   cmp   #$B1       ; "1" key pressed? ($31+80)
         bne   Double
         bit   SS_DblOff  ; turn off double graphics mode
         jmp   Play

Double   cmp   #$B2       ; "2" key pressed? ($32+80)
         bne   Esc
         bit   SS_DblOn   ; turn on double graphics mode
         jmp   Play

Esc      cmp   #$9B       ; escape key pressed? ($1B+80)
         beq   Exit2
         jmp   Play

Exit2    jmp   Exit








; ****************************************************************
; *                    Control-Reset Handler                     *
; ****************************************************************

SetReset lda   #<DoReset
         sta   $3F2
         lda   #>DoReset
         sta   $3F3
         jsr   ROM_Pwrup  ; set checksum
         rts

DoReset  sta   KeyStrobe
         jsr   TestGS     ; re-setup //gs border color & speed
         jsr   Grfx
         lda   treeidx
         beq   DoReset1   ; already at the beginning, don't adjust
         dec   treeidx    ; play last section again
DoReset1 lda   #0         ; set load to main memory
         sta   auxreq
         sta   blkindx    ; clear entries
         lda   VidSize
         sta   sizehi
         jsr   hddrdwrpart
         bcs   Exit3
         jmp   Play

Exit3    jmp   Exit


; ****************************************************************
; *                  Emulator-specific Routines                  *
; ****************************************************************

EmuTest  ldx   #$FF       ; Test floating bus 255 times
         lda   #0
         sta   EmuVar     ; zero out count of positive tests
Emu1     sta   SS_Float   ; tickle Sweet16
         lda   SS_Float   ; load value from bus
         cmp   #0         ; Virtual ][? (always returns $00)
         beq   Emu3
         cmp   #$16       ; Sweet16? (returns $16 when tickled, $30 otherwise)
         beq   Emu3
Emu2     dex              ; keep counting
         cpx   #0
         beq   Emu4       ; done with 255 tests yet?
         jmp   Emu1       ; If not, keep going
Emu3     inc   EmuVar     ; found potential emulator, increment count
         jmp   Emu2
Emu4     lda   EmuVar     ; load counts
         cmp   #$FF       ; 255 tests of 255 runs positive for emulation?
         beq   EmuFix     ; if yes, patch the code
         rts              ; otherwise, just exit cuz we're on "normal" "hardware"

EmuFix   lda   #$4C       ; JMP
         sta   PageFlip
         lda   #<EmuWait  ; set branch from normal playback routine
         sta   PageFlip+1 ; during page flipping operations
         lda   #>EmuWait  ; (which emulators can't display properly)
         sta   PageFlip+2 ; to slightly revised EmuWait routine.
         lda   #5         ; number of times to wait
         sta   EmuVar     ; playback speed variable
         rts

EmuWait  ldx   EmuVar     ; wait for 6 vertical blank periods (10fps)

EmuVBL   jsr   TestVBL    ; sync next vertical blank period
         dex
         bpl   EmuVBL     ; do it till X = zero (remove to EMUWAIT with audio)
         bit   SS_Page1   ; always show Page 1
         lda   VidSize
         sta   ldrhi      ; always load to page 1
         jmp   ChkKey     ; Resume playback using PLAY after keypress check


; ****************************************************************
; *                    //gs-specific routines                    *
; ****************************************************************

TestGS   sec
         jsr   ROM_TestGS ; does RTS on //e, clears carry on //gs
         bcc   SetGS
         clc
         rts              ; not a //gs, just exit

SetGS    lda   #0
         sta   SS_Border  ; turn border color black       --uses text page 2

         lda   SS_Speed
         and   #%01111111
         sta   SS_Speed   ; sets processor speed to normal

         lda   #$30       ; swap BPL for BMI
         sta   VBLon+3
         lda   #$10       ; swap MBI for BPL
         sta   VBLoff+3   ; //gs reverses VBL
         rts


; ****************************************************************
; *                           Goodbye!                           *
; ****************************************************************

Exit     sta   KeyStrobe
         sta   SS_Main
         sta   SS_40col
         sta   SS_DblOff

         jsr   ROM_Text
         jsr   ROM_Home

         inc   $3F4       ; invalidate reset vector
         jsr   MLI
         !byte $65        ; ProDOS QUIT
         !word ExitParms

ExitParms
         !byte 4
         !byte 0
         !word 0
         !byte 0
         !word 0

EndReloc
}


; ****************************************************************
; *                       Pack In ProRWTS2                       *
; ****************************************************************

         !source "prorwts2.a"

         !warn "Relocated code is ", EndReloc-Reloc, "bytes. Must be less than $400."








         !if * > $3F0 {
         !error "code is too large, ends at ", *
         }



