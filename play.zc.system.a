
; play.zc.system.a

; Play "zero crossing" 1-bit audio files with visualization
; January 9, 2023
; (c) 2023 by Frank Milliron, Lombard $oftware
; https://github.com/frankmilliron/play.zc.system

; Original inspiration was the audio recorder/player from
; COMPUTE! Magazine - Issue 88 / September 1987 / Page 86

; Re-worked cycle-balanced version by Peter Ferrie/qkumba
; comp.sys.apple.2 - July 13, 2017
; https://groups.google.com/g/comp.sys.apple2.programmer/c/6MwH7Crkbbg/m/oU6NOZbqAQAJ

; Bugfix version January 1, 2023
; The CMP ($00,X) instruction can accidentally access softswitches,
; so has been replaced with 3 nops, at the expense of 1 byte.
; For compatibility with //gs, a non-ROM wait routine has also been added.


; ProDOS file format $D8 (SND) "Sampled Sound" audio files
; Ciderpress-style  #D810xx  (xx = Playback speed)

; Playback speed at 1,020,484.32 cycles per sec
; (calculated from cycle counting 2048 samples - 1 page)

; Playback speed set in low byte of prodos auxtype
; #1 - 194,563 cycles - 95 cycles per bit - 10,741.94 Hz
; #2 - 237,571 cycles - 116 cycles per bit - 8,797.28 Hz
; #3 - 290,819 cycles - 141 cycles per bit - 7,186.51 Hz (*) Default
; #4 - 354,307 cycles - 173 cycles per bit - 5,898.75 Hz

; Fun Fact 1: Original COMPUTE! audio player at "4" = 7,482.65 Hz

; Fun Fact 2: 140k floppy can store roughly 2 1/2 minutes of audio at default setting


; Memory Map:
; Player core relocated to $C00-1000 ($400)
; ProRWTS2 installed to $1000-1300 ($300)
; ProRWTS tree buffer $1300-1500 ($200)
; ProRWTS block buffer $1700-1900 ($200)
; Audio files loaded to $2000-BF00 ($9F00)


; TODO:
; Compute file size on load (EOF tracking)  idea: shift load address mid-page on final chunk so audio core stays balanced

; Save //gs accelerator speed on load - set slow to play - restore on exit
; Save //gs background/border on load - set black to play - restore on exit
; //gs text page 2 fix - detect if Alternate Screen Mode is on
; key to toggle hires split screen / text visualizer?
; screen text on machines with no lowercase?

; Arrow keys for FF/Rew
; Turn off Visualizer / Change to hires visualizer?
; Progress Bar on bottom of screen



!cpu 6502
!to "build/BASIS.SYSTEM#ff0000",plain
!symbollist "build/BASIS.SYSTEM.list.txt"

*=$2000


; ****************************************************************
; *                           Constants                          *
; ****************************************************************

AudSpd         = $76
KeyPressed     = $77

AudName        = $300     ; audio file to play
Start          = $2000
Stop           = $BF00    ; (40,704 bytes * 8 samples per byte / 7,186 Hz = 45 seconds)
AudSize        = Stop - Start

Reloc          = $C00     ; audio player code relocated here
MLI            = $BF00    ; ProDOS Machine Language Interface entry

Keyboard       = $C000    ; get keypress
KeyStrobe      = $C010    ; clear keyboard strobe
Speaker        = $C030    ; toggle speaker output
SS_Border      = $C034    ; set //gs border color
SS_Speed       = $C036    ; set //gs processor speed
Page2          = $C055    ; show text/graphics page 2

ROM_Text2Copy  = $F962    ; turn on alternate display mode on //gs
ROM_Text       = $FB2F    ; exit graphics mode, set page 1
ROM_Pwrup      = $FB6F    ; set reset vector checksum
ROM_Home       = $FC58    ; clear text screen 1
ROM_Wait       = $FCA8    ; not critical, only used for VBL check on //gs
ROM_TestGS     = $FE1F    ; test for //gs



;ProRWTS2-specific:
auxreq         = $51      ; set to 0 to read to main memory
sizelo         = $52      ; size of data to load
sizehi         = $53      ; size of data to load
reqcmd         = $54      ; set to 1 for cmdread
ldrlo          = $55      ; address to load the data
ldrhi          = $56      ; address to load the data
namlo          = $57      ; name of file to access
namhi          = $58      ; name of file to access
treeidx        = $5B      ; tree index
blkindx        = $F8      ; block index


; ****************************************************************
; *                  Create BASIS.SYSTEM Format                  *
; ****************************************************************

; When a file is selected, ProDOS launches /VOL/BASIS.SYSTEM with:
; 1) The ProDOS prefix set to the directory containing the selected file
; 2) The filename of the selected file stored at $2006
; 3) $280 is set to the name of the root volume
; 4) $380 is set to the name of the launched SYS file (ie, /VOL/BASIS.SYSTEM)
; NOTE: Bitsy Bye may leave some of the paths lowercased and high bits set (!)

         jmp   BASIS

         !hex  EE EE      ; signifies launchable prodos file
         !byte $41        ; prodos path buffer length (65 bytes)
         !fill 65,0       ; prodos full path buffer

BASIS                     ; *=$2047
         sta   KeyStrobe  ; clear stray keypresses
         jsr   ROM_Home

         ldx   #15-1
-        lda   Info1,x    ; show info
         sta   $429,x
         lda   Info2,x
         sta   $4A9,x
         lda   Info3,x
         sta   $5A9,x
         dex
         bpl   -

         ldx   #35-1
-        lda   Info4,x    ; show more info
         sta   $6A9,x
         lda   Info5,x
         sta   $7A9,x
         lda   Info6,x
         sta   $4D1,x
         dex
         bpl   -

MoveFilename
         ldy   $2006      ; copy filename from $2006 to $300
-        lda   $2006,y
         and   #$7F       ; strip high bit
         cmp   #$60       ; in lowercase range?
         bcc   ++         ; no, leave it alone
         and   #$DF       ; yes, make uppercase
++       sta   AudName,y
         ora   #$80       ; Apple ASCII
         sta   $5AE,y     ; filename to screen
         dey
         bpl   -
         lda   #$A0       ; cheap fix for length byte
         sta   $5AE

GetAttributes
         jsr   MLI
         !byte $C4        ; get file attributes
         !word InfoParms
;         bcs   Error

         lda   InfoParms+4 ; file_type must be $D8 "Sampled Sound"
         cmp   #$D8
         beq   AuxType
         jmp   Exit+Reloc ; since we haven't relocated yet
AuxType  lda   InfoParms+6 ; high byte of aux_type must be $10 ($10xx)
         cmp   #$10
         beq   SetType
         jmp   Exit+Reloc ; since we haven't relocated yet

SetType  lda   InfoParms+5 ; low byte of aux_type is playback speed (see table)  ---20b3
         sta   AudSpd

         cmp   #1
         beq   Speed1     ; default sample rate
         cmp   #2
         beq   Speed2
         cmp   #3
         beq   Speed3
         cmp   #4
         beq   Speed4
         jmp   Exit

Speed2   lda   #<Info8
         sta   Speed1+3
         lda   #>Info8
         sta   Speed1+4
         jmp   Speed1

Speed3   lda   #<Info9
         sta   Speed1+3   ; change to new sample rate text
         lda   #>Info9
         sta   Speed1+4
         jmp   Speed1

Speed4   lda   #<Info10
         sta   Speed1+3
         lda   #>Info10
         sta   Speed1+4

Speed1   ldx   #18-1
-        lda   Info7,x    ; **self-modified!
         sta   $7B6,x     ; show playback sample rate
         dex
         bpl   -

ProRWTS2 jsr   init       ; sets up ProRWTS2, relocates itself to $1000

         lda   #>AudName
         sta   namhi
         lda   #<AudName
         sta   namlo

         lda   #>AudSize  ; load some bytes  ---check for EOF here
         sta   sizehi
         lda   #$20       ; do it starting at $2000
         sta   ldrhi

         ldy   #1         ; cmdread
         sty   reqcmd
         dey
         sty   ldrlo
         sty   sizelo
         sty   auxreq

RelocPlayer               ; y=0       
Move     lda   Relocated,y
         sta   Reloc,y   
         dey
         bne   Move
         inc   Move+2
         inc   Move+5
         lda   Move+5
         cmp   #$10       ; stop moving at $1000
         bne   Move

         jmp   Reloc


InfoParms                 ; GET_FILE_INFO ($C4) Parameters   --- will need to copy to Reloc
         !byte   $0a      ; param_count
         !word   AudName  ; pathname
         !byte   0        ; access
         !byte   0        ; file_type
         !word   0        ; aux_type
         !byte   0        ; storage_type
         !word   0        ; blocks_used
         !word   0        ; mod_date
         !word   0        ; mod_time
         !word   0        ; create_date
         !word   0        ; create_time

         !xor   $80 {
Info1    !text "PLAY.ZC.SYSTEM "
Info2    !text "============== "
Info3    !text "File:          "                     ; filename to $5AF
Info4    !text "Filetype: $D8 (SND) 'Sampled Sound'"
Info5    !text "Sample Rate:                       "
Info6    !text "Now Playing Offset $               " ; offset #$ to $4E5

Info7    !text "10,742 Hz (High)  "
Info8    !text "8,797 Hz (Mid)    "
Info9    !text "7,186 Hz (Default)"
Info10   !text "5,899 Hz (Lo-fi)  "
         }


; ****************************************************************
; *                     Initialize Everything                    *
; ****************************************************************

Relocated
!pseudopc Reloc {

         jsr   SetReset

         jsr   TestGS     ; re-setup //gs border color & speed


Setup    lda   #$00       ; start address (low byte)
         sta   auxreq
         sta   GetNote+6
         ;sta   KeyPressed

         lda   #>Start    ; start address (high byte)
         sta   GetNote+7
         lda   #>Stop     ; stop address (high byte)
         sta   StopAddr+1
         lda   AudSpd     ; playback speed
         sta   SameByte+2

         lda   #$20       ; turn page 2 white for visualizer
         ldx   #$77
ClrPg2   sta   $800,x     ; preserve screen holes on page 2
         sta   $880,x     ; //c and //c+ use them for serial port
         sta   $900,x
         sta   $980,x
         sta   $a00,x
         sta   $a80,x
         sta   $b00,x
         sta   $b80,x
         dex
         bpl   ClrPg2


; ****************************************************************
; *                      Load Audio Segment                      *
; ****************************************************************

         lda   #>AudSize  ; load some bytes  ---check for EOF here/show segment info here
         sta   sizehi
         lda   #$20       ; do it starting at $2000
         sta   ldrhi

         jsr   hddopendir ; open for read, load first segment

         jmp   ZCPlay     ; play loaded segment



Loader   lda   #>AudSize  ; load some bytes  ---check for EOF here/show segment info here
         sta   sizehi
         lda   #$20       ; do it starting at $2000
         sta   ldrhi


         lda   #$00       ; start address (low byte) ---section copied from Setup
         sta   auxreq     ; main mem only
         sta   GetNote+6
         ;sta   KeyPressed
         lda   #>Start    ; start address (high byte)
         sta   GetNote+7
         lda   #>Stop     ; stop address (high byte)
         sta   StopAddr+1
         lda   AudSpd     ; playback speed
         sta   SameByte+2



         jsr   hddrdwrpart ; load next segment

         jmp   ZCPlay     ; play loaded segment


         jmp   Loader     ; again till end

Exit1    jmp   Exit


; ****************************************************************
; *                     Zero-Crossing Player                     *
; ****************************************************************

ZCPlay   jmp   GetNote    ; X=0 here

SamePage ldy   #8         ; bits per byte

SameByte pha
         lda   #3         ; playback speed  **self-modified!
         jsr   FakeWait
         pla
         asl              ; shift bits into carry
         bcc   Delay      ; if carry is zero, don't click

Click    sta   Speaker    ; found a high bit

         pha
PageFlip bit   Page2      ; **self-modified!
         lda   PageFlip+1
         eor   #1         ; alternate displaying page 1/2
         sta   PageFlip+1
         pla

         jmp   NextBit

Delay    cmp   ($00),y    ; 5
         cmp   ($00),y    ; 5
         cmp   ($00),y    ; 5
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2

NextBit  dey              ; 2  end of current 8-bit note?
         bne   SameByte1

GetNote  lda   Keyboard   ; check for keypress
         bmi   Key        ; yes, let's exit

         lda   $d1d1,x    ; current byte  **self-modified!
         inx
         bne   SamePage1
         inc   GetNote+7
         lda   GetNote+7
StopAddr cmp   #$d1       ; stop address  **self-modified!
         bne   SamePage
         beq   Loader

SameByte1
         cmp   $44,x      ; 4  even out cycle count
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2
         jmp   SameByte   ; 3
SamePage1
         nop              ; 2
         nop              ; 2
         nop              ; 2
         nop              ; 2
         jmp   SamePage   ; 3

FakeWait sec              ; delay for (26 + 27*Acc + 5*(Acc*Acc))/2 cycles
wait1    pha              ; but without using buggy //gs ROM banking
wait2    sbc   #1
         bne   wait2
         pla
         sbc   #1
         bne   wait1
         rts










; ****************************************************************
; *                       Keypress Handler                       *
; ****************************************************************

Key      sta   KeyStrobe

Rew      cmp   #$88       ; left arrow key pressed? ($08+80)
         bne   FastFor
         ldx   treeidx
         beq   Pause2     ; if treeidx is already 0 don't rewind
         dex
         beq   Rew1       ; if it's 1, decrement 1
         dex              ; otherwise decrement 2
Rew1     stx   treeidx
         jmp   DoReset1   ; restart playback using reset routine

FastFor  cmp   #$95       ; right arrow key pressed? ($15+80)
         bne   Pause
         inc   treeidx
         jmp   DoReset1

Pause    cmp   #$A0       ; space Bar pressed? ($20+80)
         bne   Esc
Pause1   lda   Keyboard
         bpl   Pause1     ; test for second keypress
         cmp   #$9B       ; escape key pressed? ($1B+80)
         beq   Exit2
         cmp   #$A0
         beq   Pause2
         bit   KeyStrobe
         jmp   Pause1
Pause2   bit   KeyStrobe
         jmp   ZCPlay

Esc      cmp   #$9B       ; escape key pressed? ($1B+80)
         beq   Exit2
         rts

Exit2    jmp   Exit








; ****************************************************************
; *                    Control-Reset Handler                     *
; ****************************************************************

SetReset lda   #<DoReset
         sta   $3F2
         lda   #>DoReset
         sta   $3F3
         jsr   ROM_Pwrup  ; set checksum
         rts

DoReset  sta   KeyStrobe
         jsr   TestGS     ; re-setup //gs border color & speed
         ;jsr   Grfx
         lda   treeidx
         beq   DoReset1   ; already at the beginning, don't adjust
         dec   treeidx    ; play last section again
DoReset1 lda   #0         ; set load to main memory
         sta   auxreq
         sta   blkindx    ; clear entries
         lda   AudSize
         sta   sizehi
         jsr   hddrdwrpart
         bcs   Exit3
         jmp   ZCPlay

Exit3    jmp   Exit


; ****************************************************************
; *                    //gs-specific routines                    *
; ****************************************************************

TestGS   sec
         jsr   ROM_TestGS ; does RTS on //e, clears carry on //gs
         bcc   SetGS
         clc
         rts              ; not a //gs, just exit

SetGS    ;lda   #0
         ;sta   SS_Border  ; turn border & background colors black - store/restore?

         lda   SS_Speed
         and   #%01111111
         sta   SS_Speed   ; sets processor speed to normal  - store/restore?

         ldx   #0
         lda   #$20       ; inverse space char
!cpu 65816
-        sta   $E00800,x  ; when Alternate Display Mode is turned off, the "2"s
         sta   $E00900,x  ; displayed on the screen live at $E00800
         sta   $E00A00,x  ; (page "2"/$0800 of IIgs bank $E0)
         sta   $E00B00,x  ; They are initialized by the IIgs boot ROM
         inx
         bne   -
!cpu 6502

         rts


; ****************************************************************
; *                           Goodbye!                           *
; ****************************************************************

Exit     ;sei              ; turn off VBL interrupts
         sta   KeyStrobe
         ;sta   SS_Main
         ;sta   SS_40col
         ;sta   SS_DblOff

         jsr   ROM_Text
         jsr   ROM_Home

         inc   $3F4       ; invalidate reset vector
         jsr   MLI
         !byte $65        ; ProDOS QUIT
         !word ExitParms

ExitParms
         !byte 4          ; 4 parameters
         !byte 0
         !word 0          ; none used
         !byte 0
         !word 0

EndReloc
}


; ****************************************************************
; *                       Pack In ProRWTS2                       *
; ****************************************************************

         !source "prorwts2.a"

         ;!warn "Relocated code is ", EndReloc-Reloc, "bytes. Must be less than $400."

